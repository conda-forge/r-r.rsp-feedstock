{% set version = "0.46.0" %}
{% set posix = 'm2-' if win else '' %}

package:
  name: r-r.rsp
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/R.rsp_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/R.rsp/R.rsp_{{ version }}.tar.gz
  sha256: 1a9f680ffe563abdaa91add6ebf5e6c0ecbe57f0d39687bcb272ff2a987c33bb

build:
  number: 1
  noarch: generic
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
  host:
    - r-base
    - r-r.cache
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.23.0
    - r-r.utils
    - r-digest >=0.6.13
  run:
    - r-base
    - r-r.cache
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.23.0
    - r-r.utils
    - r-digest >=0.6.13

test:
  commands:
    - $R -e "library('R.rsp')"           # [not win]
    - "\"%R%\" -e \"library('R.rsp')\""  # [win]

about:
  home: https://github.com/HenrikBengtsson/R.rsp
  license: LGPL-2.1-or-later
  summary: The RSP markup language makes any text-based document come alive.  RSP provides a powerful markup for controlling the content and output of LaTeX, HTML, Markdown, AsciiDoc, Sweave and knitr documents (and more), e.g. 'Today's date is <%=Sys.Date()%>'.  Contrary to many other literate programming languages, with
    RSP it is straightforward to loop over mixtures of code and text sections, e.g. in month-by-month summaries.  RSP has also several preprocessing directives for incorporating static and dynamic contents of external files (local or online) among other things.  Functions rstring() and rcat() make it easy to process RSP
    strings, rsource() sources an RSP file as it was an R script, while rfile() compiles it (even online) into its final output format, e.g. rfile('report.tex.rsp') generates 'report.pdf' and rfile('report.md.rsp') generates 'report.html'.  RSP is ideal for self-contained scientific reports and R package vignettes.  It's
    easy to use - if you know how to write an R script, you'll be up and running within minutes.
  license_family: LGPL
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/LGPL-2.1

extra:
  recipe-maintainers:
    - conda-forge/r

# Package: R.rsp
# Version: 0.43.1
# Depends: R (>= 2.14.0)
# Imports: methods, stats, tools, utils, R.methodsS3 (>= 1.7.1), R.oo (>= 1.22.0), R.utils, R.cache (>= 0.13.0), digest (>= 0.6.13)
# Suggests: tcltk, markdown (>= 0.8), knitr (>= 1.9), R.devices (>= 2.15.1), base64enc (>= 0.1-2)
# SuggestsNote: Recommended: R.devices, base64enc, markdown
# VignetteBuilder: R.rsp
# Date: 2019-02-06
# Title: Dynamic Generation of Scientific Reports
# Authors@R: c(person("Henrik", "Bengtsson", role=c("aut", "cre", "cph"), email = "henrikb@braju.com"))
# Author: Henrik Bengtsson [aut, cre, cph]
# Maintainer: Henrik Bengtsson <henrikb@braju.com>
# Description: The RSP markup language makes any text-based document come alive.  RSP provides a powerful markup for controlling the content and output of LaTeX, HTML, Markdown, AsciiDoc, Sweave and knitr documents (and more), e.g. 'Today's date is <%=Sys.Date()%>'.  Contrary to many other literate programming languages, with RSP it is straightforward to loop over mixtures of code and text sections, e.g. in month-by-month summaries.  RSP has also several preprocessing directives for incorporating static and dynamic contents of external files (local or online) among other things.  Functions rstring() and rcat() make it easy to process RSP strings, rsource() sources an RSP file as it was an R script, while rfile() compiles it (even online) into its final output format, e.g. rfile('report.tex.rsp') generates 'report.pdf' and rfile('report.md.rsp') generates 'report.html'.  RSP is ideal for self-contained scientific reports and R package vignettes.  It's easy to use - if you know how to write an R script, you'll be up and running within minutes.
# License: LGPL (>= 2.1)
# URL: https://github.com/HenrikBengtsson/R.rsp
# BugReports: https://github.com/HenrikBengtsson/R.rsp/issues
# LazyLoad: TRUE
# RoxygenNote: 6.0.1
# NeedsCompilation: no
# Packaged: 2019-02-05 22:07:39 UTC; hb
# Repository: CRAN
# Date/Publication: 2019-02-05 23:11:50 UTC
